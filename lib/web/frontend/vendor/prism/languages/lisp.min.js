!function(a){function b(a){return RegExp("(\\()"+a+"(?=[\\s\\)])")}function c(a){return RegExp("([\\s([])"+a+"(?=[\\s)])")}var d="[-+*/_~!@$%^=<>{}\\w]+",e="(\\()",f="(?=\\))",g="(?=\\s)",h={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:RegExp("`"+d+"'")}},"quoted-symbol":{pattern:RegExp("#?'"+d),alias:["variable","symbol"]},"lisp-property":{pattern:RegExp(":"+d),alias:"property"},splice:{pattern:RegExp(",@?"+d),alias:["symbol","variable"]},keyword:[{pattern:RegExp(e+"(?:(?:lexical-)?let\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)"+g),lookbehind:!0},{pattern:RegExp(e+"(?:for|do|collect|return|finally|append|concat|in|by)"+g),lookbehind:!0}],declare:{pattern:b("declare"),lookbehind:!0,alias:"keyword"},interactive:{pattern:b("interactive"),lookbehind:!0,alias:"keyword"},"boolean":{pattern:c("(?:t|nil)"),lookbehind:!0},number:{pattern:c("[-+]?\\d+(?:\\.\\d*)?"),lookbehind:!0},defvar:{pattern:RegExp(e+"def(?:var|const|custom|group)\\s+"+d),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(d)}},defun:{pattern:RegExp(e+"(?:cl-)?(?:defun\\*?|defmacro)\\s+"+d+"\\s+\\([\\s\\S]*?\\)"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,"function":{pattern:RegExp("(^\\s)"+d),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp(e+"lambda\\s+\\((?:&?"+d+"\\s*)*\\)"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(e+d),lookbehind:!0},punctuation:[/(?:['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},i={"lisp-marker":RegExp("&[-+*/_~!@$%^=<>{}\\w]+"),rest:{argument:{pattern:RegExp(d),alias:"variable"},varform:{pattern:RegExp(e+d+"\\s+\\S[\\s\\S]*"+f),lookbehind:!0,inside:{string:h.string,"boolean":h["boolean"],number:h.number,symbol:h.symbol,punctuation:/[()]/}}}},j="\\S+(?:\\s+\\S+)*",k={pattern:RegExp(e+"[\\s\\S]*"+f),lookbehind:!0,inside:{"rest-vars":{pattern:RegExp("&(?:rest|body)\\s+"+j),inside:i},"other-marker-vars":{pattern:RegExp("&(?:optional|aux)\\s+"+j),inside:i},keys:{pattern:RegExp("&key\\s+"+j+"(?:\\s+&allow-other-keys)?"),inside:i},argument:{pattern:RegExp(d),alias:"variable"},punctuation:/[()]/}};h.lambda.inside.arguments=k,h.defun.inside.arguments=a.util.clone(k),h.defun.inside.arguments.inside.sublist=k,a.languages.lisp=h,a.languages.elisp=h,a.languages.emacs=h,a.languages["emacs-lisp"]=h}(Prism);